#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 06, 2019 10:40:44 PM -02  platform: Linux

import sys
from Tkinter import END
from tkFileDialog import asksaveasfilename,askopenfilename
import os

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Che_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Che_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Che_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font9 = "-family {DejaVu Sans} -size 10 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("568x347+350+174")
        top.title("Che Editor")
        top.configure(background="#333333")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=-0.123, rely=1.47, relheight=0.003
                , relwidth=1.188)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(width=675)

        self.txtComando = tk.Entry(top)
        self.txtComando.place(relx=0.581, rely=0.0,height=24, relwidth=0.292)
        self.txtComando.configure(background="white")
        self.txtComando.configure(font="TkFixedFont")
        self.txtComando.configure(selectbackground="#c4c4c4")

        self.btnComando = tk.Button(top)
        self.btnComando.place(relx=0.889, rely=0.0, height=25, width=40)
        self.btnComando.configure(activebackground="#f9f9f9")
        self.btnComando.configure(background="#333333")
        self.btnComando.configure(foreground="#ffffff")
        self.btnComando.configure(text='''X''')
        self.btnComando["command"] = self.comando

        self.lblNome = tk.Label(top)
        self.lblNome.place(relx=0.0, rely=0.922, height=28, width=336)
        self.lblNome.configure(background="#333333")
        self.lblNome.configure(foreground="#ffffff")
        self.lblNome.configure(justify='left')
        self.lblNome.configure(width=336)

        self.lblDados = tk.Label(top)
        self.lblDados.place(relx=0.687, rely=0.922, height=29, width=176)
        self.lblDados.configure(background="#333333")
        self.lblDados.configure(font=font9)
        self.lblDados.configure(foreground="#ffffff")
        self.lblDados.configure(justify='right')
        self.lblDados.configure(width=176)

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.0, rely=0.086, relheight=0.839
                , relwidth=1.0)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap='none')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
            
    global nome

    def comando(self):
        comando = self.txtComando.get()
        #salvar
        if "salva" in comando:
            try:
                fileName = asksaveasfilename()
                file = open(fileName, 'w')
                textoutput = self.Text1.get(0.0, END)
                file.write(textoutput)
            except:
                pass
            finally:
                file.close()

        #salvar fornecendo o nome
        if "s " in comando:
            lista = comando.split()
            nome = lista[1]
            try:
                file = open(nome, 'w')
                textoutput = self.Text1.get(0.0, END)
                file.write(textoutput)
            except:
                pass
            finally:
                file.close()

        #salvar em outro diretorio
        if "sC /" in comando:
            lista = comando.split()
            caminho = lista[1]
            endereco = caminho.split('/')
            nome = endereco[-1]
            try:
                file = open(caminho, 'w')
                textoutput = self.Text1.get(0.0, END)
                file.write(textoutput)
            except:
                pass
            finally:
                file.close()

        #abrir
	if "o" in comando:
            try:
                fileName = askopenfilename()
                file = open(fileName, 'r')
                contents = file.read()
                self.Text1.delete(0.0, END)
                self.Text1.insert(0.0, contents)
            except:
                pass
        #abrir com nome
        if "o " in comando:
            lista = comando.split()
            nome = lista[1]
            try:
                fileName = askopenfilename()
                file = open(nome, 'r')
                contents = file.read()

                self.Text1.delete(0.0, END)
                self.Text1.insert(0.0, contents)
            except:
                pass

if __name__ == '__main__':
    vp_start_gui()





